{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","console","log","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","NewCommentForm","props","commentTextRef","useRef","onAddComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","text","trim","CSSTransition","in","timeout","unmountOnExit","classNames","appear","className","classes","form","onSubmit","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","loadedComments","addedCommentHandler","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","url","path","exact","to"],"mappings":"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","file":"static/js/4.230ad0b8.chunk.js","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  switch (action.type) {\n    case \"SEND\": {\n      return {\n        data: null,\n        error: null,\n        status: \"pending\",\n      };\n    }\n    case \"SUCCESS\": {\n      return {\n        data: action.responseData,\n        error: null,\n        status: \"completed\",\n      };\n    }\n    case \"ERROR\": {\n      return {\n        data: null,\n        error: action.errorMessage,\n        status: \"completed\",\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async (requestData) => {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = \"https://routs-mad-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    console.log(data[key]);\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3dSab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2J4_d\",\"loading\":\"NewCommentForm_loading__1cJti\",\"control\":\"NewCommentForm_control__2CWSU\",\"actions\":\"NewCommentForm_actions__xIAwV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__OmJxi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2OGs4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__qVDN1\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n    if (enteredText === \"\") return;\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredText.trim() },\n      quoteId: props.quoteId,\n    });\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <CSSTransition in timeout={900} unmountOnExit classNames=\"fade\" appear>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        <div className={classes.control} onSubmit={submitFormHandler}>\n          <label htmlFor=\"comment\">Your Comment</label>\n          <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className=\"btn\">Add Comment</button>\n        </div>\n      </form>\n    </CSSTransition>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && (!loadedComments || loadedComments === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <CSSTransition in timeout={900} unmountOnExit classNames=\"fade\" appear>\n      <section className={classes.comments}>\n        <h2>User Comments</h2>\n        {!isAddingComment && (\n          <button className=\"btn\" onClick={startAddCommentHandler}>\n            Add a Comment\n          </button>\n        )}\n        {isAddingComment && (\n          <NewCommentForm\n            quoteId={quoteId}\n            onAddComment={addedCommentHandler}\n          />\n        )}\n        {comments}\n        {/* {status === \"completed\" && <CommentsList comments={loadedComments} />} */}\n      </section>\n    </CSSTransition>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst QuoteDetails = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote found</p>;\r\n  }\r\n\r\n  console.log(match.url);\r\n  console.log(match.path);\r\n  console.log(quoteId);\r\n\r\n  return (\r\n    <CSSTransition in timeout={900} unmountOnExit classNames=\"fade\" appear>\r\n      <div>\r\n        <h1>Quote Details Page! </h1>\r\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n        <Route path={`${match.url}`} exact>\r\n          <div className=\"centered\">\r\n            <Link to={`${match.url}/comments`} className=\"btn--flat\">\r\n              Load Comments\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n          <Comments />\r\n        </Route>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}