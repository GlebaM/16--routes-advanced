{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","console","log","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntered","setIsEntered","authorInputRef","useRef","textInputRef","when","onFocus","e","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","ref","rows","actions","onClick","NewQuote","history","useHistory","useEffect","CSSTransition","in","timeout","unmountOnExit","classNames","appear"],"mappings":"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","file":"static/js/6.6a8eae98.chunk.js","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  switch (action.type) {\n    case \"SEND\": {\n      return {\n        data: null,\n        error: null,\n        status: \"pending\",\n      };\n    }\n    case \"SUCCESS\": {\n      return {\n        data: action.responseData,\n        error: null,\n        status: \"completed\",\n      };\n    }\n    case \"ERROR\": {\n      return {\n        data: null,\n        error: action.errorMessage,\n        status: \"completed\",\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async (requestData) => {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = \"https://routs-mad-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    console.log(data[key]);\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__o38vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3bRxK\",\"loading\":\"QuoteForm_loading__2AhIy\",\"control\":\"QuoteForm_control__3WzGQ\",\"actions\":\"QuoteForm_actions__hoszw\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState, Fragment } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntered, setIsEntered] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    //validate here\n    if (!enteredAuthor.trim() || !enteredText.trim()) return;\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishEnteringHandler = (e) => {\n    setIsEntered(false);\n  };\n\n  const formFocusedHandler = (e) => {\n    setIsEntered(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntered}\n        message={() =>\n          \"Are you sure you want to leave this page?  All entered data will be lost!!!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <CSSTransition in timeout={600} unmountOnExit classNames=\"fade\" appear>\r\n        <h1>New Quote Page!</h1>\r\n      </CSSTransition>\r\n      <CSSTransition in timeout={600} unmountOnExit classNames=\"fade\" appear>\r\n        <QuoteForm\r\n          isLoading={status === \"pending\"}\r\n          onAddQuote={addQuoteHandler}\r\n        />\r\n      </CSSTransition>\r\n      ;\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}